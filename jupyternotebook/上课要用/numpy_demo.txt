1、第一个部分（创建高维矩阵的几种方式）
import numpy as np

print('创建np高维矩阵的一种方式')
t1 = np.arange(12)
# 矩阵支持四则运算 (矩阵中每个元素分别进行运算)
t1 = t1 + 1
print(t1, type(t1),t1.shape)
l = [1, 2, 3, 4, 5]
# 必须nd.array与list区别
# l = l + 1
print(l, type(l))
# 可以通过reshape修改矩阵的形状
t1 = t1.reshape(3,4)
print(t1, type(t1),t1.shape)

print('创建np高维矩阵的二种方式')
# 可以把list转化为ndarray
data = [[1,2,3.14,4],
        [True,6,7,None]]
print(data,type(data))
# 创建ndarray时支持各种类型
t2 = np.array(data)
print(t2, type(t2),t2.shape)

print('创建np高维矩阵的三种方式')
t3 = np.random.random(size=[3,4])
print(t3, type(t3),t3.shape)
t3 = np.random.randint(1,100,size=(3,4))
print(t3, type(t3),t3.shape)
t3 = np.random.normal(loc=10,size=[3,4])
print(t3, type(t3),t3.shape)

2、第二个部分（矩阵的运算）
import numpy as np

print('常见属性')
t1 = np.arange(12).reshape(3,4)
print(t1,type(t1),t1.shape)
print('矩阵元素的数量:', t1.size)
print(f'元素类型{t1.dtype},所占的空间大小:{t1.itemsize}个字节')
t1 = t1.astype(np.float64)
print(f'元素类型{t1.dtype},所占的空间大小:{t1.itemsize}个字节')
print('矩阵的升降维')
# (1000,10,10) ==> (1000,100)
t1 = np.arange(12).reshape(3,4)
# 矩阵运算: 就是矩阵中每个元素分别进行运算
t2 = t1 + 1
print(t2)
# 对二维矩阵进行降维操作, order='F' 则是列优先
t3 = t1.flatten(order='C')
t3 = t3 + 1
t3 = t3.reshape(3,4)
print(t3)
print('矩阵的四则运算操作')
# 让t2形状与t1完全相同
t2 = t1
print(t2)
t3 = t2 * t1
print(t3)
print('矩阵尺寸可以不同,但是必须 (?,1) , (1,?)')
t2 = np.arange(4).reshape(1,4)
print(t2)
# t2中的4个元素，与t1中的每一行4个元素分别进行运算
print(t1 + t2)
# t2中的3个元素，与t1中的每一列3个元素分别进行运算
t2 = np.arange(3).reshape(3,1)
print(t2)
print(t1 * t2)


3、第三部分（矩阵的选取和筛选）
import numpy as np

t1 = np.arange(12).reshape(3,4)
# 获取某个元素且赋值
t1[0,0] = 100
print(t1)
print('选择连续的行和列')
print(t1[0:2,1:])
print('选择连续的行与不连续的列')
print(t1[1:,[1,3]])
print('选择不连续的行与列')
# 【0,1】【2,3】
print(t1[[0,2],[1,3]])
print('正确选择不连续的行与列(需要两步)')
t2 = t1[:,[1,3]]
print(t2[[0,2],:])
print('逻辑元素的方式筛选元素')
# 返回t1同等尺寸的布尔矩阵
print(t1 > 8)
# 矩阵方括号中支持布尔值
print(t1[True])
# 布尔值可以是1个，也可以和行数相等，也可以每个元素一个
# 第二行就会被过滤掉
print(t1[[True,False,True]])
# 保留布尔值对应位置的元素
print(t1[t1>8])


4、第四部分（应用）
from PIL import Image
import numpy as np

# 加载图片
data = Image.open("../data/phone.jpg")
# RGB 红绿蓝
print(data,type(data))
# 图片转化矩阵的格式
im = np.array(data)
# 颜色值 [0~255]
print(im.shape,im.dtype)
# 原始图的矩阵值
print(im)
b = [255,255,255] - im
print('运算之后的结果')
print(b)
new_im = Image.fromarray(b.astype(np.uint8))
new_im.save("../data/phone2.jpg")