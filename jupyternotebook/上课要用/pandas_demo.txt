1、第一部分（创建Series 和DataFrame)
import numpy as np
import pandas as pd

# 先创建一个Series(列)
ss = pd.Series(data=list('ABC'),index=list('abc'),name='title')
print(ss,ss.index,ss.name)
print(ss.values,type(ss.values))
print('-'*100)
# 创建一个DataFrame
df = pd.DataFrame(data=np.arange(12).reshape(3,4),index=list('abc'),columns=list('wxyz'))
# 显示整个df的结构，相关的列信息
df.info()
print(df,type(df))
print(df.columns,df.values,type(df.values))
print('获取某一列,个打印values的数据类型')
print(df['y'],type(df['y']))

2、第二部分（获取信息、选择行列以及筛选）
import numpy as np
import pandas as pd

# 创建一个DataFrame
df = pd.DataFrame(data=np.arange(12).reshape(3,4),index=list('abc'),columns=list('wxyz'))
# 显示整个df的结构，相关的信息
df.info()

print('pd默认列优先，numpy默认是行优先')
print(df['w'],type(df['w']))
# 如果是多列,则返回的是子DataFrame
print(df[['w','z']],type(df[['w','z']]))

print('通过iloc采用自然数索引来获取')
print(df.iloc[:,[2,1]])
print(df.iloc[[0,2],[0,2,3]])

print('通过条件来过滤与筛选')
print(df)
print(df[df['y'] > 5])
print('多条件的过滤 | & ~ 运算')
print(df[(df['y']>5) & (df['x']<8)])
print(df[~(df['x']>1)])

3、第三部分（读写excel文件）
import numpy as np
import pandas as pd
import random

print('加载本地的csv格式文件')
df = pd.read_csv("../data/groupby.csv")
df.info() # 显示相关的信息
print(df.head(n=3))
# 获取某一列的数据
print(df['Name'])
print(df.values,type(df.values))
# 通过ndarray API也可以直接获取values
print(df.values[:,[1,3]])

print('加载本地的excel格式文件')
df = pd.read_excel("../data/user.xls",index_col='编号')
df.info()
print(df.head(n=3))
# 随机生成940个1~3之间的数
type = [random.randint(1,3) for _ in range(940)]
# df追加列
df = pd.concat([df,pd.Series(data=type,index=df.index,name='用户类别')],axis=1)
df.to_excel("../data/user_type.xls")


4、第四部分（排序和统计计算）
import pandas as pd

df = pd.read_csv("../data/groupby.csv")
df.info()
print(df.head(n=3))
# ascending=True,默认是升序
sort_data = df.sort_values(by="Count",ascending=False)
print(sort_data)
print('分组的实现，分组之后每个组的索引就是分组的列')
group_data = df.groupby(by="Brand")
print(group_data,type(group_data))

for index,value in group_data:
    print('每个组的索引', index)
    print('每个组的记录', value)

print('计算每种品牌有多少件衣服')
# count,统计非空的行pandas中的count是对记录的每个列都进行统计
# print(group_data.count())
# print(group_data.sum())
print('1:',group_data['Count'].sum())
# 推荐分组方式
print('2:',df['Count'].groupby(by=df["Brand"]).sum())